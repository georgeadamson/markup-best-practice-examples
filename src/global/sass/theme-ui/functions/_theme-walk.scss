// Dependencies:
// - list-slice()
// - list-splice()
// - to-number()

// Usage:
// - theme-walk($map, $key)
// - theme-walk($map, $keys...)
// - theme-walk($map, key1, $key2, $etc)
@function theme-walk($map, $keys...) {
  $breadcrumbTrail: [];

  // The last item in $keys might be flag to silence error messages:
  $silent: nth($keys, length($keys));

  @if type-of($silent) == bool {
    // Remove leaf key:
    $keys: list-slice(1, length($keys) - 1);
  } @else {
    $silent: false;
  }

  // When the leaf key includes an index, eg: "primary.3",
  // split it into 2 keys, eg: [colors, primary.3] --> [colors, primary, 3]
  $leaf-key: nth($keys, length($keys));
  $index-of-dot: str-index($leaf-key, '.');
  @if $index-of-dot > 1 {
    // A list-split() function would be useful here:
    $keyA: str-slice($leaf-key, 1, $index-of-dot - 1);
    $keyB: str-slice($leaf-key, $index-of-dot + 1);

    // $keyB is a string that needs to be converted to number.
    // Assume the number must be between 0 and 99:
    @if str-length($keyB) > 0 and str-length($keyB) < 3 {
      $first-digit: str-slice($keyB, 1, 1);
      $last-digit: str-slice($keyB, str-length($keyB), -1);

      // Rudimentary duck-typing to ensure $key is a number:
      // We merely test whether first & last digits are numeric.
      @if str-index('123456789', $first-digit) !=
        null and
        str-index('0123456789', $last-digit) !=
        null
      {
        // All to prevent this function from choking:
        $keyB: to-number($keyB);

        // Replace the last key with the key & index derived from it:
        $keys: list-splice($keys, length($keys), 1, #{$keyA}, $keyB);
      }
    }
  }

  $result: $map;

  @if type-of($map) == map {
    // Just in case there are nested lists:
    // $keys: list-flatten($keys);

    @each $key in $keys {
      $breadcrumbTrail: join($breadcrumbTrail, $key);

      @if type-of($key) == number and not unitless($key) {
        // The $key is actually a css prop value so
        // use it as-is instead of lookng it up:
        // Eg: "18px"
        @return $key;
      }
      // Leaf nodes such as fontSizes can be a list of values:
      // In which case $key must be an index (zero-based).
      // Note: The calling function may need to append units to the return value (eg px)
      @else if type-of($result) == list and type-of($key) == number {
        // Note: This is a Javascript index so it is zero-based.
        @if $key >= 0 and $key < length($result) {
          @return nth($result, $key + 1);
        } @else {
          @if $silent {
            @return null;
          } @else {
            @warn '@function theme-walk(): Expected key `#{$key}` to be a valid index for list `#{$result}`. (Path: #{inspect($breadcrumbTrail)})';
          }
        }
      }
      // Otherwise we expect the current result to be a map:
      @else if type-of($result) != map {
        @if $silent {
          @return null;
        } @else {
          @warn '@function theme-walk(): Expected to find key `#{$key}` but subnode `#{$result}` (#{type-of($result)}) is not a map. (Path: #{inspect($breadcrumbTrail)})';
        }
      }
      // Handle the next branch in the path:
      @else if map-has-key($result, $key) {
        $child: map-get($result, $key);

        @if type-of($child) == map or type-of($child) == list {
          $result: $child;
        } @else {
          @return $child;
        }
      } @else {
        // Key not found in $map path:
        @if $silent {
          @return null;
        } @else {
          @warn '@function theme-walk(): Expected to find key `#{$key}` in map `#{$result}`. (Path: #{inspect($breadcrumbTrail)})';
        }
      }
    }
  } @else {
    @if $silent {
      @return null;
    } @else {
      @error '@function theme-walk(): Expected $map to be a map but it is `#{$map}` (#{type-of($map)}). (Path: #{inspect($breadcrumbTrail)})';
    }
  }

  @return $result;
}
